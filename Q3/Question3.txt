Task 3 - Robbie the Transformer
Background
Inspired by the Transformers movies, Robbie can now transform into a Drone or an AUV (Autonomous Underwater Vehicle), which has different initial exploration speeds (see the table below). Rules in tasks 1 and 2 are still valid for the transformed Robbie.

+------------------+--Mountain------------+--Lake---------------+--Crater-----------------+
| Robbie the Robot | 6 (height unit/day)  | 8 (depth unit/day)  | 10 (perimeter unit/day) |
+------------------+----------------------+---------------------+-------------------------+
| Robbie the Drone | 12 (height unit/day) | 6 (depth unit/day)  | 8 (perimeter unit/day) |
+------------------+----------------------+---------------------+-------------------------+
| Robbie the AUV   | 2 (height unit/day)  | 12 (depth unit/day) | 6 (perimeter unit/day)  |
+------------------+----------------------+---------------------+-------------------------+

Robbie is now given a list of feature names to explore (in that order). Your task is to help Robbie decides which type of robot Robbie should transform into (or not transform at all) to complete the mission in the shortest time.

There are some rules for transformations:

Robbie is allowed to transform only once (if he wants to) for a mission. His preference is: no transformation, a drone, and an AUV (in this order) if this does not increase the duration of the mission.

The gain of his skills and experiences from his previous explorations remains. This means, for example, if he previously explored one mountain,  no matter of his transformations, his exploration speed for mountains will be increased by 20%.

After each mission, Robbie will automatically transform into the regular Robbie the Robot.

Your tasks
# geo_features.py
You may make changes to the classes GeoFeature , Mountain, Lake, and Crater as you need.

# robot.py 
You may make changes to the class Robot and/or add more classes as you need.

# task3.py 
In addition to commands in the previous tasks, you need to add the following commands:

The user can input mission <list of features>, where <list of features> is a list of features (separated by commas) that Robbie needs to explore (in that order). You should help Robbie transforms into the best form (or not transform at all) and accomplish the mission (see examples for more details).

You can assume that <Y> and <X> correspond to a valid location (Y,X) on the map.

You can assume that all user inputs are valid.

You can assume that feature names are unique and all inputted feature names are valid.

You are allowed to modify the import statements in the scaffold, but you are not allowed to import any modules which were not originally imported in the scaffold.

Examples
Example 1
> show map
.....
.m...
....l
..c..
> mission eridania
transform into an AUV
move from (0,0) to (2,4) then explore lake eridania
> mission eridania
transform into an AUV

Example 2
> show map
.....
.m...
....l
..c..
> mission olympus mons,huygens
transform into a drone
move from (0,0) to (1,1) then explore mountain olympus mons
move from (1,1) to (3,2) then explore crater huygens
> display journey

Example 3
> show map
.....
.m...
....l
..c..
> mission huygens,eridania
no transformation
move from (0,0) to (3,2) then explore crater huygens
move from (3,2) to (2,4) then explore lake eridania
> display journey
Day 1-3: move (0,0) -> (0,1) -> (0,2) -> (3,2)
Day 4-8: explore crater huygens
Day 9-11: move (3,2) -> (3,3) -> (3,4) -> (2,4)
Day 12-13: explore lake eridania
> quit
goodbye